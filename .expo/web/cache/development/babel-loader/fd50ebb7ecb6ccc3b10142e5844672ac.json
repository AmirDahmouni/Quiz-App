{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = ModalStatusBarManager;\n\nvar _slicedToArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/slicedToArray\"));\n\nvar _native = require(\"@react-navigation/native\");\n\nvar React = _interopRequireWildcard(require(\"react\"));\n\nvar _reactNative = require(\"react-native\");\n\nfunction _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== \"function\") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }\n\nfunction _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== \"default\" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }\n\nfunction ModalStatusBarManager(_ref) {\n  var dark = _ref.dark,\n      layout = _ref.layout,\n      insets = _ref.insets,\n      style = _ref.style;\n\n  var _flattenedStyle$trans, _flattenedStyle$trans2;\n\n  var _useTheme = (0, _native.useTheme)(),\n      darkTheme = _useTheme.dark;\n\n  var _React$useState = React.useState(true),\n      _React$useState2 = (0, _slicedToArray2.default)(_React$useState, 2),\n      overlapping = _React$useState2[0],\n      setOverlapping = _React$useState2[1];\n\n  var scale = 1 - 20 / layout.width;\n  var offset = (insets.top - 34) * scale;\n\n  var flattenedStyle = _reactNative.StyleSheet.flatten(style);\n\n  var translateY = flattenedStyle === null || flattenedStyle === void 0 ? void 0 : (_flattenedStyle$trans = flattenedStyle.transform) === null || _flattenedStyle$trans === void 0 ? void 0 : (_flattenedStyle$trans2 = _flattenedStyle$trans.find(function (s) {\n    return s.translateY !== undefined;\n  })) === null || _flattenedStyle$trans2 === void 0 ? void 0 : _flattenedStyle$trans2.translateY;\n  React.useEffect(function () {\n    var listener = function listener(_ref2) {\n      var value = _ref2.value;\n      setOverlapping(value < offset);\n    };\n\n    var sub = translateY === null || translateY === void 0 ? void 0 : translateY.addListener(listener);\n    return function () {\n      return translateY === null || translateY === void 0 ? void 0 : translateY.removeListener(sub);\n    };\n  }, [offset, translateY]);\n  var darkContent = dark !== null && dark !== void 0 ? dark : !darkTheme;\n  return React.createElement(_reactNative.StatusBar, {\n    animated: true,\n    barStyle: overlapping && darkContent ? 'dark-content' : 'light-content'\n  });\n}","map":{"version":3,"sources":["ModalStatusBarManager.tsx"],"names":["style","dark","darkTheme","React","scale","layout","offset","insets","flattenedStyle","StyleSheet","translateY","s","listener","value","setOverlapping","sub","darkContent","overlapping"],"mappings":";;;;;;;;;AAAA;;AACA;;AACA;;;;;;AAYe,SAAA,qBAAA,OAKL;AAAA,MALoC,IAKpC,QALoC,IAKpC;AAAA,MALoC,MAKpC,QALoC,MAKpC;AAAA,MALoC,MAKpC,QALoC,MAKpC;AAAA,MADRA,KACQ,QADRA,KACQ;;AAAA,MAAA,qBAAA,EAAA,sBAAA;;AACR,kBAAA,uBAAA;AAAA,MAAcE,SAAd,aAAQD,IAAR;;AACA,wBAAsCE,KAAK,CAALA,QAAAA,CAAtC,IAAsCA,CAAtC;AAAA;AAAA,MAAM,WAAN;AAAA,MAAM,cAAN;;AAEA,MAAMC,KAAK,GAAG,IAAI,KAAKC,MAAM,CAA7B,KAAA;AACA,MAAMC,MAAM,GAAG,CAACC,MAAM,CAANA,GAAAA,GAAD,EAAA,IAAf,KAAA;;AAEA,MAAMC,cAAc,GAAGC,wBAAAA,OAAAA,CAAvB,KAAuBA,CAAvB;;AACA,MAAMC,UAAU,GAAGF,cAAH,KAAA,IAAGA,IAAAA,cAAH,KAAA,KAAA,CAAGA,GAAH,KAAA,CAAGA,GAAH,CAAA,qBAAA,GAAGA,cAAc,CAAjB,SAAA,MAAA,IAAA,IAAA,qBAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,CAAA,sBAAA,GAAGA,qBAAAA,CAAAA,IAAAA,CAChBG,UAAAA,CAAD;AAAA,WAAYA,CAAC,CAADA,UAAAA,KADE,SACd;AAAA,GADiBH,CAAH,MAAA,IAAA,IAAA,sBAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAGA,sBAAAA,CAAnB,UAAA;AAIAL,EAAAA,KAAK,CAALA,SAAAA,CAAgB,YAAM;AACpB,QAAMS,QAAQ,GAAG,SAAXA,QAAW,QAAkC;AAAA,UAA/BC,KAA+B,SAA/BA,KAA+B;AACjDC,MAAAA,cAAc,CAACD,KAAK,GAApBC,MAAc,CAAdA;AADF,KAAA;;AAIA,QAAMC,GAAG,GAAGL,UAAH,KAAA,IAAGA,IAAAA,UAAH,KAAA,KAAA,CAAGA,GAAH,KAAA,CAAGA,GAAAA,UAAU,CAAVA,WAAAA,CAAZ,QAAYA,CAAZ;AAEA,WAAO;AAAA,aAAMA,UAAN,KAAA,IAAMA,IAAAA,UAAN,KAAA,KAAA,CAAMA,GAAN,KAAA,CAAMA,GAAAA,UAAU,CAAVA,cAAAA,CAAb,GAAaA,CAAN;AAAA,KAAP;AAPFP,GAAAA,EAQG,CAAA,MAAA,EARHA,UAQG,CARHA;AAUA,MAAMa,WAAW,GAAGf,IAAH,KAAA,IAAGA,IAAAA,IAAH,KAAA,KAAA,CAAGA,GAAH,IAAGA,GAAQ,CAA5B,SAAA;AAEA,SACE,KAAA,CAAA,aAAA,CAAA,sBAAA,EAAA;AACE,IAAA,QAAQ,EADV,IAAA;AAEE,IAAA,QAAQ,EAAEgB,WAAW,IAAXA,WAAAA,GAAAA,cAAAA,GAA8C;AAF1D,GAAA,CADF;AAMD","sourcesContent":["import { useTheme } from '@react-navigation/native';\nimport * as React from 'react';\nimport { StatusBar, StyleSheet } from 'react-native';\nimport type { EdgeInsets } from 'react-native-safe-area-context';\n\nimport type { Layout } from '../types';\n\ntype Props = {\n  dark: boolean | undefined;\n  layout: Layout;\n  insets: EdgeInsets;\n  style: any;\n};\n\nexport default function ModalStatusBarManager({\n  dark,\n  layout,\n  insets,\n  style,\n}: Props) {\n  const { dark: darkTheme } = useTheme();\n  const [overlapping, setOverlapping] = React.useState(true);\n\n  const scale = 1 - 20 / layout.width;\n  const offset = (insets.top - 34) * scale;\n\n  const flattenedStyle = StyleSheet.flatten(style);\n  const translateY = flattenedStyle?.transform?.find(\n    (s: any) => s.translateY !== undefined\n  )?.translateY;\n\n  React.useEffect(() => {\n    const listener = ({ value }: { value: number }) => {\n      setOverlapping(value < offset);\n    };\n\n    const sub = translateY?.addListener(listener);\n\n    return () => translateY?.removeListener(sub);\n  }, [offset, translateY]);\n\n  const darkContent = dark ?? !darkTheme;\n\n  return (\n    <StatusBar\n      animated\n      barStyle={overlapping && darkContent ? 'dark-content' : 'light-content'}\n    />\n  );\n}\n"]},"metadata":{},"sourceType":"script"}