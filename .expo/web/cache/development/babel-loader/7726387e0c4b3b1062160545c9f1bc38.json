{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _extends3 = _interopRequireDefault(require(\"@babel/runtime/helpers/extends\"));\n\nvar _objectWithoutProperties2 = _interopRequireDefault(require(\"@babel/runtime/helpers/objectWithoutProperties\"));\n\nvar _native = require(\"@react-navigation/native\");\n\nvar React = _interopRequireWildcard(require(\"react\"));\n\nvar _warnOnce = _interopRequireDefault(require(\"warn-once\"));\n\nvar _StackView = _interopRequireDefault(require(\"../views/Stack/StackView\"));\n\nvar _excluded = [\"initialRouteName\", \"children\", \"screenListeners\", \"screenOptions\"];\n\nfunction _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== \"function\") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }\n\nfunction _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== \"default\" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction StackNavigator(_ref) {\n  var initialRouteName = _ref.initialRouteName,\n      children = _ref.children,\n      screenListeners = _ref.screenListeners,\n      screenOptions = _ref.screenOptions,\n      rest = (0, _objectWithoutProperties2.default)(_ref, _excluded);\n  var mode = rest.mode;\n  (0, _warnOnce.default)(mode != null, \"Stack Navigator: 'mode=\\\"\" + mode + \"\\\"' is deprecated. Use 'presentation: \\\"\" + mode + \"\\\"' in 'screenOptions' instead.\\n\\nSee https://reactnavigation.org/docs/stack-navigator#presentation for more details.\");\n  var headerMode = rest.headerMode;\n  (0, _warnOnce.default)(headerMode === 'none', \"Stack Navigator: 'headerMode=\\\"none\\\"' is deprecated. Use 'headerShown: false' in 'screenOptions' instead.\\n\\nSee https://reactnavigation.org/docs/stack-navigator/#headershown for more details.\");\n  (0, _warnOnce.default)(headerMode != null && headerMode !== 'none', \"Stack Navigator: 'headerMode' is moved to 'options'. Moved it to 'screenOptions' to keep current behavior.\\n\\nSee https://reactnavigation.org/docs/stack-navigator/#headermode for more details.\");\n  var keyboardHandlingEnabled = rest.keyboardHandlingEnabled;\n  (0, _warnOnce.default)(keyboardHandlingEnabled !== undefined, \"Stack Navigator: 'keyboardHandlingEnabled' is moved to 'options'. Moved it to 'screenOptions' to keep current behavior.\\n\\nSee https://reactnavigation.org/docs/stack-navigator/#keyboardhandlingenabled for more details.\");\n  var defaultScreenOptions = {\n    presentation: mode,\n    headerShown: headerMode ? headerMode !== 'none' : true,\n    headerMode: headerMode && headerMode !== 'none' ? headerMode : undefined,\n    keyboardHandlingEnabled: keyboardHandlingEnabled\n  };\n\n  var _useNavigationBuilder = (0, _native.useNavigationBuilder)(_native.StackRouter, {\n    initialRouteName: initialRouteName,\n    children: children,\n    screenListeners: screenListeners,\n    screenOptions: screenOptions,\n    defaultScreenOptions: defaultScreenOptions\n  }),\n      state = _useNavigationBuilder.state,\n      descriptors = _useNavigationBuilder.descriptors,\n      navigation = _useNavigationBuilder.navigation,\n      NavigationContent = _useNavigationBuilder.NavigationContent;\n\n  React.useEffect(function () {\n    var _navigation$addListen;\n\n    return (_navigation$addListen = navigation.addListener) === null || _navigation$addListen === void 0 ? void 0 : _navigation$addListen.call(navigation, 'tabPress', function (e) {\n      var isFocused = navigation.isFocused();\n      requestAnimationFrame(function () {\n        if (state.index > 0 && isFocused && !e.defaultPrevented) {\n          navigation.dispatch((0, _extends3.default)({}, _native.StackActions.popToTop(), {\n            target: state.key\n          }));\n        }\n      });\n    });\n  }, [navigation, state.index, state.key]);\n  return React.createElement(NavigationContent, null, React.createElement(_StackView.default, _extends({}, rest, {\n    state: state,\n    descriptors: descriptors,\n    navigation: navigation\n  })));\n}\n\nvar _default = (0, _native.createNavigatorFactory)(StackNavigator);\n\nexports.default = _default;","map":{"version":3,"sources":["createStackNavigator.tsx"],"names":["rest","mode","warnOnce","headerMode","keyboardHandlingEnabled","defaultScreenOptions","presentation","headerShown","NavigationContent","useNavigationBuilder","initialRouteName","children","screenListeners","screenOptions","React","navigation","e","isFocused","requestAnimationFrame","state","StackActions","target","key","createNavigatorFactory"],"mappings":";;;;;;;;;;;AAAA;;AAYA;;AACA;;AAQA;;;;;;;;;;;;;;;;;;;;;;;;;;AAWA,SAAA,cAAA,OAMU;AAAA,MANc,gBAMd,QANc,gBAMd;AAAA,MANc,QAMd,QANc,QAMd;AAAA,MANc,eAMd,QANc,eAMd;AAAA,MANc,aAMd,QANc,aAMd;AAAA,MADLA,IACK;AAER,MAAMC,IAAI,GAAGD,IAAI,CAAjB,IAAA;AAEAE,yBACED,IAAI,IADE,IAARC,gCAE6BD,IAF7BC,gDAJQ,IAIRA;AAMA,MAAMC,UAAU,GAAGH,IAAI,CAAvB,UAAA;AAEAE,yBACEC,UAAU,KADZD,MAAAA;AAKAA,yBACEC,UAAU,IAAVA,IAAAA,IAAsBA,UAAU,KAlB1B,MAiBRD;AAMA,MAAME,uBAAuB,GAAGJ,IAAI,CAApC,uBAAA;AAEAE,yBACEE,uBAAuB,KADzBF,SAAAA;AAKA,MAAMG,oBAA4C,GAAG;AACnDC,IAAAA,YAAY,EADuC,IAAA;AAEnDC,IAAAA,WAAW,EAAEJ,UAAU,GAAGA,UAAU,KAAb,MAAA,GAF4B,IAAA;AAGnDA,IAAAA,UAAU,EAAEA,UAAU,IAAIA,UAAU,KAAxBA,MAAAA,GAAAA,UAAAA,GAHuC,SAAA;AAInDC,IAAAA,uBAAAA,EAAAA;AAJmD,GAArD;;AAOA,8BACEK,kCAAoB,mBAApBA,EAMe;AACbC,IAAAA,gBADa,EACbA,gBADa;AAEbC,IAAAA,QAFa,EAEbA,QAFa;AAGbC,IAAAA,eAHa,EAGbA,eAHa;AAIbC,IAAAA,aAJa,EAIbA,aAJa;AAKbR,IAAAA,oBAAAA,EAAAA;AALa,GANfI,CADF;AAAA,MAAM,KAAN,yBAAM,KAAN;AAAA,MAAM,WAAN,yBAAM,WAAN;AAAA,MAAM,UAAN,yBAAM,UAAN;AAAA,MAAwCD,iBAAxC,yBAAwCA,iBAAxC;;AAeAM,EAAAA,KAAK,CAALA,SAAAA,CACE,YAAA;AAAA,QAAA,qBAAA;;AAAA,WAAA,CAAA,qBAAA,GACEC,UAAU,CADZ,WAAA,MAAA,IAAA,IAAA,qBAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GACEA,qBAAAA,CAAAA,IAAAA,CAAAA,UAAAA,EAAU,UAAVA,EAAsCC,UAAAA,CAAD,EAAO;AAC1C,UAAMC,SAAS,GAAGF,UAAU,CADc,SACxBA,EAAlB;AAIAG,MAAAA,qBAAqB,CAAC,YAAM;AAC1B,YACEC,KAAK,CAALA,KAAAA,GAAAA,CAAAA,IAAAA,SAAAA,IAEA,CAAEH,CAAD,CAHH,gBAAA,EAIE;AAGAD,UAAAA,UAAU,CAAVA,QAAAA,4BACKK,qBADe,QACfA,EADLL;AAEEM,YAAAA,MAAM,EAAEF,KAAK,CAACG;AAFhBP;AAID;AAZHG,OAAqB,CAArBA;AANJ,KACEH,CADF;AADFD,GAAAA,EAsBE,CAAA,UAAA,EAAaK,KAAK,CAAlB,KAAA,EAA0BA,KAAK,CAtBjCL,GAsBE,CAtBFA;AAyBA,SACE,KAAA,CAAA,aAAA,CAAA,iBAAA,EAAA,IAAA,EACE,KAAA,CAAA,aAAA,CAAA,kBAAA,EAAA,QAAA,CAAA,EAAA,EAAA,IAAA,EAAA;AAEE,IAAA,KAAK,EAFP,KAAA;AAGE,IAAA,WAAW,EAHb,WAAA;AAIE,IAAA,UAAU,EAAEC;AAJd,GAAA,CAAA,CADF,CADF;AAUD;;eAEcQ,oCAAf,cAAeA,C","sourcesContent":["import {\n  createNavigatorFactory,\n  DefaultNavigatorOptions,\n  EventArg,\n  ParamListBase,\n  StackActionHelpers,\n  StackActions,\n  StackNavigationState,\n  StackRouter,\n  StackRouterOptions,\n  useNavigationBuilder,\n} from '@react-navigation/native';\nimport * as React from 'react';\nimport warnOnce from 'warn-once';\n\nimport type {\n  StackHeaderMode,\n  StackNavigationConfig,\n  StackNavigationEventMap,\n  StackNavigationOptions,\n} from '../types';\nimport StackView from '../views/Stack/StackView';\n\ntype Props = DefaultNavigatorOptions<\n  ParamListBase,\n  StackNavigationState<ParamListBase>,\n  StackNavigationOptions,\n  StackNavigationEventMap\n> &\n  StackRouterOptions &\n  StackNavigationConfig;\n\nfunction StackNavigator({\n  initialRouteName,\n  children,\n  screenListeners,\n  screenOptions,\n  ...rest\n}: Props) {\n  // @ts-expect-error: mode is deprecated\n  const mode = rest.mode as 'card' | 'modal' | undefined;\n\n  warnOnce(\n    mode != null,\n    `Stack Navigator: 'mode=\"${mode}\"' is deprecated. Use 'presentation: \"${mode}\"' in 'screenOptions' instead.\\n\\nSee https://reactnavigation.org/docs/stack-navigator#presentation for more details.`\n  );\n\n  // @ts-expect-error: headerMode='none' is deprecated\n  const headerMode = rest.headerMode as StackHeaderMode | 'none' | undefined;\n\n  warnOnce(\n    headerMode === 'none',\n    `Stack Navigator: 'headerMode=\"none\"' is deprecated. Use 'headerShown: false' in 'screenOptions' instead.\\n\\nSee https://reactnavigation.org/docs/stack-navigator/#headershown for more details.`\n  );\n\n  warnOnce(\n    headerMode != null && headerMode !== 'none',\n    `Stack Navigator: 'headerMode' is moved to 'options'. Moved it to 'screenOptions' to keep current behavior.\\n\\nSee https://reactnavigation.org/docs/stack-navigator/#headermode for more details.`\n  );\n\n  // @ts-expect-error: headerMode='none' is deprecated\n  const keyboardHandlingEnabled = rest.keyboardHandlingEnabled;\n\n  warnOnce(\n    keyboardHandlingEnabled !== undefined,\n    `Stack Navigator: 'keyboardHandlingEnabled' is moved to 'options'. Moved it to 'screenOptions' to keep current behavior.\\n\\nSee https://reactnavigation.org/docs/stack-navigator/#keyboardhandlingenabled for more details.`\n  );\n\n  const defaultScreenOptions: StackNavigationOptions = {\n    presentation: mode,\n    headerShown: headerMode ? headerMode !== 'none' : true,\n    headerMode: headerMode && headerMode !== 'none' ? headerMode : undefined,\n    keyboardHandlingEnabled,\n  };\n\n  const { state, descriptors, navigation, NavigationContent } =\n    useNavigationBuilder<\n      StackNavigationState<ParamListBase>,\n      StackRouterOptions,\n      StackActionHelpers<ParamListBase>,\n      StackNavigationOptions,\n      StackNavigationEventMap\n    >(StackRouter, {\n      initialRouteName,\n      children,\n      screenListeners,\n      screenOptions,\n      defaultScreenOptions,\n    });\n\n  React.useEffect(\n    () =>\n      navigation.addListener?.('tabPress', (e) => {\n        const isFocused = navigation.isFocused();\n\n        // Run the operation in the next frame so we're sure all listeners have been run\n        // This is necessary to know if preventDefault() has been called\n        requestAnimationFrame(() => {\n          if (\n            state.index > 0 &&\n            isFocused &&\n            !(e as EventArg<'tabPress', true>).defaultPrevented\n          ) {\n            // When user taps on already focused tab and we're inside the tab,\n            // reset the stack to replicate native behaviour\n            navigation.dispatch({\n              ...StackActions.popToTop(),\n              target: state.key,\n            });\n          }\n        });\n      }),\n    [navigation, state.index, state.key]\n  );\n\n  return (\n    <NavigationContent>\n      <StackView\n        {...rest}\n        state={state}\n        descriptors={descriptors}\n        navigation={navigation}\n      />\n    </NavigationContent>\n  );\n}\n\nexport default createNavigatorFactory<\n  StackNavigationState<ParamListBase>,\n  StackNavigationOptions,\n  StackNavigationEventMap,\n  typeof StackNavigator\n>(StackNavigator);\n"]},"metadata":{},"sourceType":"script"}