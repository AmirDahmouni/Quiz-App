{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _extends3 = _interopRequireDefault(require(\"@babel/runtime/helpers/extends\"));\n\nvar _objectWithoutProperties2 = _interopRequireDefault(require(\"@babel/runtime/helpers/objectWithoutProperties\"));\n\nvar _native = require(\"@react-navigation/native\");\n\nvar React = _interopRequireWildcard(require(\"react\"));\n\nvar _NativeStackView = _interopRequireDefault(require(\"../views/NativeStackView\"));\n\nvar _excluded = [\"initialRouteName\", \"children\", \"screenListeners\", \"screenOptions\"];\n\nfunction _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== \"function\") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }\n\nfunction _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== \"default\" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction NativeStackNavigator(_ref) {\n  var initialRouteName = _ref.initialRouteName,\n      children = _ref.children,\n      screenListeners = _ref.screenListeners,\n      screenOptions = _ref.screenOptions,\n      rest = (0, _objectWithoutProperties2.default)(_ref, _excluded);\n\n  var _useNavigationBuilder = (0, _native.useNavigationBuilder)(_native.StackRouter, {\n    initialRouteName: initialRouteName,\n    children: children,\n    screenListeners: screenListeners,\n    screenOptions: screenOptions\n  }),\n      state = _useNavigationBuilder.state,\n      descriptors = _useNavigationBuilder.descriptors,\n      navigation = _useNavigationBuilder.navigation;\n\n  React.useEffect(function () {\n    var _navigation$addListen;\n\n    return navigation === null || navigation === void 0 ? void 0 : (_navigation$addListen = navigation.addListener) === null || _navigation$addListen === void 0 ? void 0 : _navigation$addListen.call(navigation, 'tabPress', function (e) {\n      var isFocused = navigation.isFocused();\n      requestAnimationFrame(function () {\n        if (state.index > 0 && isFocused && !e.defaultPrevented) {\n          navigation.dispatch((0, _extends3.default)({}, _native.StackActions.popToTop(), {\n            target: state.key\n          }));\n        }\n      });\n    });\n  }, [navigation, state.index, state.key]);\n  return React.createElement(_NativeStackView.default, _extends({}, rest, {\n    state: state,\n    navigation: navigation,\n    descriptors: descriptors\n  }));\n}\n\nvar _default = (0, _native.createNavigatorFactory)(NativeStackNavigator);\n\nexports.default = _default;","map":{"version":3,"sources":["createNativeStackNavigator.tsx"],"names":["rest","navigation","useNavigationBuilder","initialRouteName","children","screenListeners","screenOptions","React","e","isFocused","requestAnimationFrame","state","StackActions","target","key","descriptors","createNavigatorFactory"],"mappings":";;;;;;;;;;;AAAA;;AAWA;;AAOA;;;;;;;;;;;;;;;;;;;;;;;;;;AAEA,SAAA,oBAAA,OAM8B;AAAA,MANA,gBAMA,QANA,gBAMA;AAAA,MANA,QAMA,QANA,QAMA;AAAA,MANA,eAMA,QANA,eAMA;AAAA,MANA,aAMA,QANA,aAMA;AAAA,MADzBA,IACyB;;AAC5B,8BAA2CE,kCAAoB,mBAApBA,EAM5B;AACbC,IAAAA,gBADa,EACbA,gBADa;AAEbC,IAAAA,QAFa,EAEbA,QAFa;AAGbC,IAAAA,eAHa,EAGbA,eAHa;AAIbC,IAAAA,aAAAA,EAAAA;AAJa,GAN4BJ,CAA3C;AAAA,MAAM,KAAN,yBAAM,KAAN;AAAA,MAAM,WAAN,yBAAM,WAAN;AAAA,MAA4BD,UAA5B,yBAA4BA,UAA5B;;AAaAM,EAAAA,KAAK,CAALA,SAAAA,CACE,YAAA;AAAA,QAAA,qBAAA;;AAAA,WACEN,UADF,KAAA,IACEA,IAAAA,UADF,KAAA,KAAA,CACEA,GADF,KAAA,CACEA,GADF,CAAA,qBAAA,GACEA,UAAU,CADZ,WAAA,MAAA,IAAA,IAAA,qBAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GACEA,qBAAAA,CAAAA,IAAAA,CAAAA,UAAAA,EAAU,UAAVA,EAAuCO,UAAAA,CAAD,EAAY;AAChD,UAAMC,SAAS,GAAGR,UAAU,CADoB,SAC9BA,EAAlB;AAIAS,MAAAA,qBAAqB,CAAC,YAAM;AAC1B,YACEC,KAAK,CAALA,KAAAA,GAAAA,CAAAA,IAAAA,SAAAA,IAEA,CAAEH,CAAD,CAHH,gBAAA,EAIE;AAGAP,UAAAA,UAAU,CAAVA,QAAAA,4BACKW,qBADe,QACfA,EADLX;AAEEY,YAAAA,MAAM,EAAEF,KAAK,CAACG;AAFhBb;AAID;AAZHS,OAAqB,CAArBA;AANJ,KACET,CADF;AADFM,GAAAA,EAsBE,CAAA,UAAA,EAAaI,KAAK,CAAlB,KAAA,EAA0BA,KAAK,CAtBjCJ,GAsBE,CAtBFA;AAyBA,SACE,KAAA,CAAA,aAAA,CAAA,wBAAA,EAAA,QAAA,CAAA,EAAA,EAAA,IAAA,EAAA;AAEE,IAAA,KAAK,EAFP,KAAA;AAGE,IAAA,UAAU,EAHZ,UAAA;AAIE,IAAA,WAAW,EAAEQ;AAJf,GAAA,CAAA,CADF;AAQD;;eAEcC,oCAAf,oBAAeA,C","sourcesContent":["import {\n  createNavigatorFactory,\n  EventArg,\n  ParamListBase,\n  StackActionHelpers,\n  StackActions,\n  StackNavigationState,\n  StackRouter,\n  StackRouterOptions,\n  useNavigationBuilder,\n} from '@react-navigation/native';\nimport * as React from 'react';\n\nimport type {\n  NativeStackNavigationEventMap,\n  NativeStackNavigationOptions,\n  NativeStackNavigatorProps,\n} from '../types';\nimport NativeStackView from '../views/NativeStackView';\n\nfunction NativeStackNavigator({\n  initialRouteName,\n  children,\n  screenListeners,\n  screenOptions,\n  ...rest\n}: NativeStackNavigatorProps) {\n  const { state, descriptors, navigation } = useNavigationBuilder<\n    StackNavigationState<ParamListBase>,\n    StackRouterOptions,\n    StackActionHelpers<ParamListBase>,\n    NativeStackNavigationOptions,\n    NativeStackNavigationEventMap\n  >(StackRouter, {\n    initialRouteName,\n    children,\n    screenListeners,\n    screenOptions,\n  });\n\n  React.useEffect(\n    () =>\n      navigation?.addListener?.('tabPress', (e: any) => {\n        const isFocused = navigation.isFocused();\n\n        // Run the operation in the next frame so we're sure all listeners have been run\n        // This is necessary to know if preventDefault() has been called\n        requestAnimationFrame(() => {\n          if (\n            state.index > 0 &&\n            isFocused &&\n            !(e as EventArg<'tabPress', true>).defaultPrevented\n          ) {\n            // When user taps on already focused tab and we're inside the tab,\n            // reset the stack to replicate native behaviour\n            navigation.dispatch({\n              ...StackActions.popToTop(),\n              target: state.key,\n            });\n          }\n        });\n      }),\n    [navigation, state.index, state.key]\n  );\n\n  return (\n    <NativeStackView\n      {...rest}\n      state={state}\n      navigation={navigation}\n      descriptors={descriptors}\n    />\n  );\n}\n\nexport default createNavigatorFactory<\n  StackNavigationState<ParamListBase>,\n  NativeStackNavigationOptions,\n  NativeStackNavigationEventMap,\n  typeof NativeStackNavigator\n>(NativeStackNavigator);\n"]},"metadata":{},"sourceType":"script"}